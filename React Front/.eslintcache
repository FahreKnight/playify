[{"C:\\Users\\mamik\\Desktop\\fati\\src\\index.js":"1","C:\\Users\\mamik\\Desktop\\fati\\src\\App.tsx":"2","C:\\Users\\mamik\\Desktop\\fati\\src\\store\\reducer.tsx":"3","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\Dashboard\\Dashboard.tsx":"4","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\Dashboard\\Navi.tsx":"5","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\View\\PostListView.tsx":"6","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\View\\PostView.tsx":"7","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\View\\CommentView.tsx":"8"},{"size":415,"mtime":1612097407426,"results":"9","hashOfConfig":"10"},{"size":386,"mtime":1609416396151,"results":"11","hashOfConfig":"10"},{"size":2310,"mtime":1612153568950,"results":"12","hashOfConfig":"10"},{"size":5888,"mtime":1612164713001,"results":"13","hashOfConfig":"10"},{"size":6550,"mtime":1612164591874,"results":"14","hashOfConfig":"10"},{"size":1356,"mtime":1612152878370,"results":"15","hashOfConfig":"10"},{"size":4385,"mtime":1612154776301,"results":"16","hashOfConfig":"10"},{"size":1128,"mtime":1612154645619,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1jgzunw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\mamik\\Desktop\\fati\\src\\index.js",[],["41","42"],"C:\\Users\\mamik\\Desktop\\fati\\src\\App.tsx",[],["43","44"],"C:\\Users\\mamik\\Desktop\\fati\\src\\store\\reducer.tsx",[],"C:\\Users\\mamik\\Desktop\\fati\\src\\components\\Dashboard\\Dashboard.tsx",["45","46","47","48","49","50","51","52"],"import { Col, Modal, Select, Row, Input, List, Skeleton, Collapse, Card} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Image } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { Community } from \"../../types/types/community\";\r\nimport { toast } from \"react-toastify\";\r\nimport { PlusCircleOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\r\nimport { Post } from \"../../types/types/post\";\r\nimport PostListView from \"../View/PostListView\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst { Option } = Select;\r\n\r\nconst Dashboard = (props: any) => {\r\n\tconst [isNewPostModalVisible, setNewPostModalVisible] = useState(false);\r\n\tconst toggleNewPostModal = () => setNewPostModalVisible(!isNewPostModalVisible);\r\n\tconst [isNewCommunityVisible, setIsNewCommunity] = useState(false);\r\n\tconst [newCommunityName, setNewCommunityName] = useState<string>('');\r\n\tconst [communitySelectOptions, setCommunitySelectOptions] = useState<string[]>([]);\r\n\tconst [postList, setPostList] = useState<any[]>([]);\r\n\tconst [postViewList, setPostViewList] = useState<any[]>([]);\r\n\tconst [communityId, setCommunityId] = useState<string>();\r\n\tconst [title, setTitle] = useState<string>('');\r\n\tconst [content, setContent] = useState<string>('');\r\n\tconst [imageUrl, setImageUrl] = useState<string>('');\r\n\r\n\tconst toggleNewCommunity = () => setIsNewCommunity(!isNewCommunityVisible);\r\n\r\n\t\r\n\tconst addCommunity = () => {\r\n\t\tif(props.communities.filter((community: Community) => community.name === newCommunityName).length === 0){\r\n\t\t\tprops.dispatch({type: 'ADD_COMMUNITY', data: {name: newCommunityName}});\r\n\t\t\tsetNewCommunityName('');\r\n\t\t\ttoggleNewCommunity();\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttoast.error('Community Exists')\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tprepareCommunityData();\r\n\t\tsetTitle('');\r\n\t\tsetContent('');\r\n\t\tsetImageUrl('');\r\n\t\tsetCommunityId('');\r\n\t\tsetPostList(props.posts)\r\n\t}, [isNewPostModalVisible])\r\n\r\n\tconst prepareCommunityData = () => {\r\n\t\tsetCommunitySelectOptions(props.communities.map((community: Community) => <Option value={community.name}>{community.name}</Option>))\r\n\t}\r\n\r\n\tconst createPost = () => {\r\n\t\tif(communityId !== undefined && props.loggedUser?.username !== undefined ){\r\n\t\t\tprops.dispatch({type: 'ADD_POST', data: {title: title, imgUrl: imageUrl, communityId: communityId, content: content}})\r\n\t\t\ttoggleNewPostModal();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(props.loggedUser?.username === undefined)\r\n\t\t\t\ttoast.error('Please Login')\r\n\t\t\telse if(!communityId){\r\n\t\t\t\ttoast.error('Please Select Community')\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tcreatePosts();\r\n\t}, [postList])\r\n\r\n\r\n\tuseEffect(() => {\t\t\r\n\t\tprepareCommunityData();\r\n\t\tif(!isNewCommunityVisible)\r\n\t\t\tsetNewCommunityName('');\r\n\t}, [isNewCommunityVisible])\r\n\r\n\r\n\tconst createPosts = () => {\r\n\t\tsetPostViewList(postList?.map((post: Post) => ({\r\n\t\t\ttitle: post.title,\r\n\t\t\tcontent: post.content,\r\n\t\t\timage: post.imgUrl,\r\n\t\t\tcomments: []\r\n\t\t})))\r\n\t\t\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Modal\r\n\t\t\t\ttitle=\"Create New Post\"\r\n\t\t\t\tvisible={isNewPostModalVisible}\r\n\t\t\t\tonCancel={() => toggleNewPostModal()}\r\n\t\t\t\tonOk={() => toggleNewPostModal()}\r\n\t\t\t\tclosable\r\n\t\t\t\tfooter={[\r\n\t\t\t\t\t<Button key=\"back\" onClick={() => toggleNewPostModal()}>\r\n\t\t\t\t\t\tCancel\r\n\t\t\t\t\t</Button>,\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tkey=\"submit\"\r\n\t\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\t\tonClick={() => {createPost();}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Row gutter = {[0, 24]}>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tvalue={communityId}\r\n\t\t\t\t\t\t\t\tdefaultValue={undefined}\r\n\t\t\t\t\t\t\t\tstyle={{ width: 180 }}\r\n\t\t\t\t\t\t\t\tonChange={(e: any) => {setCommunityId(e);}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{communitySelectOptions}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button icon={<PlusCircleOutlined />}\r\n\t\t\t\t\t\t\tonClick = {() => toggleNewCommunity()}></Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t{isNewCommunityVisible && <Input placeholder='Community Name' value={newCommunityName} onChange={(e: any) => setNewCommunityName(e.target.value)} addonAfter={<Row><CheckOutlined onClick={() => addCommunity()}/><StopOutlined onClick={() => {setNewCommunityName(''); toggleNewCommunity()}}/></Row>}/>}\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row gutter = {[0, 16]}>\r\n\t\t\t\t\t\t<Input placeholder = 'Image Url' value={imageUrl} onChange={(e: any) => setImageUrl(e.target.value)}/>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row gutter = {[0, 16]}>\r\n\t\t\t\t\t\t<Input placeholder = \"Title\" value={title} onChange={(e: any) => setTitle(e.target.value)}></Input>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row gutter = {[0, 8]}>\r\n\t\t\t\t\t\t<TextArea placeholder = \"Type something...\" value={content} onChange={(e: any) => setContent(e.target.value)}></TextArea>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col span={6}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tsrc=\"https://mfiles.alphacoders.com/632/632875.jpg\"\r\n\t\t\t\t\t\twidth={350}\r\n\t\t\t\t\t></Image>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col span={12}>\r\n\t\t\t\t\t<Row gutter={125}>\r\n\t\t\t\t\t\t<Col span={4}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\t\t\t\tonClick={() => toggleNewPostModal()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate New Post\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tvalue={communityId}\r\n\t\t\t\t\t\t\t\tdefaultValue={undefined}\r\n\t\t\t\t\t\t\t\tstyle={{ width: 180 }}\r\n\t\t\t\t\t\t\t\tonChange={(e: any) => {setCommunityId(e);}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{communitySelectOptions}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<Row justify = \"center\">\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t{!isNewPostModalVisible && <PostListView/>}\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col span={6}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tsrc=\"https://mfiles.alphacoders.com/177/177642.jpg\"\r\n\t\t\t\t\t\twidth={350}\r\n\t\t\t\t\t></Image>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\tcommunities: state.communities,\r\n\tloggedUser: state.loggedUser,\r\n\tposts: state.posts\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\Dashboard\\Navi.tsx",["53"],"import { Button, Col, Input, Row } from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport React, { useState } from \"react\";\r\nimport { UserOutlined, MailOutlined, EyeTwoTone, EyeInvisibleOutlined } from '@ant-design/icons';\r\nimport { connect } from \"react-redux\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { User } from \"../../types/types/user\";\r\n\r\nconst Navi = (props: any) => {\r\n\tconst [isLoginModalVisible, setIsLoginModalVisible] = useState(false);\r\n\tconst [isSignUpModalVisible, setIsSignUpModalVisible] = useState(false);\r\n\tconst [userName, setUserName] = useState<string>('');\r\n\tconst [password, setPassword] = useState<string>('');\r\n\tconst [email, setEmailAddress] = useState<string>(\"\");\r\n\tconst [validationPassword, setValidationPassword] = useState<string>(\"\");\r\n\tconst [passwordVisible, setPasswordVisible] = useState<boolean>(false);\r\n\tconst [loggedUser, setLoggedUser] = useState<any>({});\r\n\r\n\tconst toggleLoginModal = () => setIsLoginModalVisible(!isLoginModalVisible);\r\n\tconst toggleSignUpModal = () => setIsSignUpModalVisible(!isSignUpModalVisible);\r\n\r\n\tconst signUp = () => {\r\n\t\tconst model = {username: userName, password: password, email: email};\r\n\t\tprops.dispatch({type: 'REGISTER', data: model})\r\n\t\tsetLoggedUser(model)\r\n\t\tclear()\r\n\t}\r\n\r\n\tconst logout = () => {\r\n\t\tprops.dispatch({type: 'LOGOUT'});\r\n\t\tsetLoggedUser({})\r\n\t\tclear()\r\n\t\ttoast.success('Logged Out')\r\n\t}\r\n\r\n\tconst login = () => {\r\n\t\tconst model = {username: userName, password: password}\r\n\t\tprops.dispatch({type: 'LOGIN', data: model})\r\n\t\tsetLoggedUser(model)\r\n\t}\r\n\r\n\tconst clear = () => {\r\n\t\tsetUserName('');\r\n\t\tsetPassword('');\r\n\t\tsetValidationPassword('');\r\n\t\tsetPasswordVisible(false);\r\n\t\tsetEmailAddress('')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ToastContainer />\r\n\t\t\t<Modal\r\n\t\t\t\ttitle=\"Login\"\r\n\t\t\t\tvisible={isLoginModalVisible}\r\n\t\t\t\tonCancel={() => toggleLoginModal()}\r\n\t\t\t\tonOk={() => toggleLoginModal()}\r\n\t\t\t\tclosable\r\n\t\t\t\tfooter={\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tkey=\"back\"\r\n\t\t\t\t\t\t\tonClick={() => toggleLoginModal()}\r\n\t\t\t\t\t\t>Cancel</Button>,\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tkey=\"submit\"\r\n\t\t\t\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tif(props.users.filter((user: User) => user.username === userName && user.password === password).length !== 0){\r\n\t\t\t\t\t\t\t\t\t\tlogin()\r\n\t\t\t\t\t\t\t\t\t\ttoggleLoginModal()\r\n\t\t\t\t\t\t\t\t\t\ttoast.success('Logged In')\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\ttoast.error('Username or Password is invalid')\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>Login</Button>,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t<div>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Input prefix = {<UserOutlined/>} placeholder = \"Username\" value={userName} onChange={(e: any) => setUserName(e.target.value)}/>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Input.Password placeholder = \"Password\" value={password} onChange={(e: any) => setPassword(e.target.value)}/> \r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</Col>        \r\n\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal\r\n\t\t\t\ttitle=\"Sign Up\"\r\n\t\t\t\tvisible={isSignUpModalVisible}\r\n\t\t\t\tonCancel={() => toggleSignUpModal()}\r\n\t\t\t\tonOk={() => toggleSignUpModal()}\r\n                closable\r\n                footer={\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tkey=\"back\"\r\n\t\t\t\t\t\t\tonClick={() => toggleSignUpModal()}\r\n\t\t\t\t\t\t>Cancel</Button>,\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tkey=\"submit\"\r\n\t\t\t\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tif(password === validationPassword){\r\n\t\t\t\t\t\t\t\t\t\tif(props.users.length === 0 || props.users?.filter((user: any) => user.username === userName) === []){\r\n\t\t\t\t\t\t\t\t\t\t\tsignUp();\r\n\t\t\t\t\t\t\t\t\t\t\ttoggleSignUpModal()\r\n\t\t\t\t\t\t\t\t\t\t\ttoast.success('Signed Up')\r\n\t\t\t\t\t\t\t\t\t\t\ttoast.success('Logged In')\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\t\ttoast.error('User Exists')\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\ttoast.error('Please Check Your Passwords')\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>Sign Up</Button>,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\tprefix={<UserOutlined />}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Username\"\r\n\t\t\t\t\t\t\t\tvalue={userName}\r\n\t\t\t\t\t\t\t\tonChange={(e: any) => setUserName(e.target.value ?? \"\")}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\tprefix={<MailOutlined />}\r\n\t\t\t\t\t\t\t\tplaceholder=\"E-mail\"\r\n\t\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\t\tonChange={(e: any) =>\r\n\t\t\t\t\t\t\t\t\tsetEmailAddress(e.target.value ?? \"\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Input.Password\r\n\t\t\t\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\t\t\tonChange={(e: any) => setPassword(e.target.value ?? \"\")}\r\n\t\t\t\t\t\t\t\ticonRender={() =>\r\n\t\t\t\t\t\t\t\t\tpasswordVisible ? <EyeTwoTone onClick = {() => {setPasswordVisible(!passwordVisible)}}/> : <EyeInvisibleOutlined />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Input.Password\r\n\t\t\t\t\t\t\t\tplaceholder=\"Retype Password\"\r\n\t\t\t\t\t\t\t\tvisibilityToggle={false}\r\n\t\t\t\t\t\t\t\tvalue={validationPassword}\r\n\t\t\t\t\t\t\t\tonChange={(e: any) =>\r\n\t\t\t\t\t\t\t\t\tsetValidationPassword(e.target.value ?? \"\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ticonRender={() =>\r\n\t\t\t\t\t\t\t\t\tpasswordVisible ? <EyeTwoTone onClick = {() => {setPasswordVisible(!passwordVisible)}}/> : <EyeInvisibleOutlined />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t\t<Row gutter = {5}>\r\n\t\t\t\t<Col style = {{display:\"flex\"}}>\r\n\t\t\t\t\t<div style = {{position: 'absolute', top: \"-5px\", margin: \"auto\", width: \"100px\"}}>Playify</div>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col  style = {{display:\"flex\", alignSelf:\"end\"}}>\r\n\t\t\t\t\t{!loggedUser?.username && <div style = {{position: 'inherit', right: \"-830px\", top: \"-5px\", margin: \"auto\", width: \"100px\"}}><Button style = {{margin:\"auto\", width: \"100px\", fontWeight: \"bold\", color: \"lightcyan\",  backgroundColor: \"lightskyblue\"}} onClick={() => toggleSignUpModal()}>Sign Up</Button></div>}\r\n\t\t\t\t\t{!loggedUser?.username ? <div style = {{position: 'inherit', right: \"-850px\", top: \"-5px\", margin: \"left\", width: \"100px\"}}><Button style = {{margin:\"left\", width: \"100px\", fontWeight: \"bold\", color: \"lightcyan\",  backgroundColor: \"lightskyblue\"}} onClick={() => toggleLoginModal()}>Login</Button> </div>: <div style = {{position: 'inherit', right: '%50', top: \"-5px\", margin: \"auto\", width: \"100px\"}}><Button style = {{margin:\"auto\", width: \"100px\", fontWeight: \"bold\"}} onClick={() => logout()}>Logout</Button></div>}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\tloggedUser: state.loggedUser,\r\n\tusers: state.users\r\n})\r\n\r\nexport default connect(mapStateToProps)(Navi);\r\n","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\View\\PostListView.tsx",["54","55"],"import React, { useEffect, useState } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { List, Skeleton } from 'antd';\r\nimport PostView from './PostView';\r\nimport { connect } from 'react-redux';\r\nimport { Post } from '../../types/types/post';\r\n\r\n\r\nconst PostListView = (props: any) => {\r\n\r\n  const [isNewCommentModalVisible, setIsNewCommentModalVisible] = useState(false);\r\n  const [postList, setPostList] = useState<any[]>([]);\r\n\r\n  \r\n  useEffect(() => {\r\n    setPostList(props.posts?.map((post: Post) => ({\r\n      title: post.title,\r\n      content: post.content,\r\n      image: post.imgUrl,\r\n      comments: [],\r\n      id: post.id\r\n    })))\r\n  }, [isNewCommentModalVisible])\r\n\r\n  return (\r\n    <div>\r\n        <List\r\n        style = {{overflow: \"auto\", overflowX: \"hidden\", height:610}}\r\n        loading={false}\r\n        itemLayout=\"horizontal\"\r\n        dataSource={postList}\r\n        renderItem={(item: any) => (\r\n          <List.Item>\r\n              <Skeleton loading = {false} active>\r\n                <PostView title = {item.title} content = {item.content} image = {item.image} id= {item.id}/>\r\n              </Skeleton>\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </div>);\r\n  \r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  posts: state.posts,\r\n  comments: state.comments\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(PostListView);","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\View\\PostView.tsx",["56","57"],"import React, { useEffect, useState } from 'react'\r\nimport {Button, Card, Collapse, Image, Modal, Row} from 'antd'\r\nimport {EditOutlined, PlusCircleOutlined} from '@ant-design/icons'\r\nimport CommentView from './CommentView'\r\nimport { connect, useStore } from 'react-redux';\r\nimport { User } from '../../types/types/user';\r\nimport { Comment } from '../../types/types/comment';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst { Panel } = Collapse;\r\n\r\n\r\nconst PostView = (props :any) => {\r\n    const [replyEditorVisible, setReplyEditorVisible] = useState(false);\r\n    const [newCommentModalVisible, setIsNewCommentModalVisible] = useState(false);\r\n    const [commentData, setCommentData] = useState<any[]>([]);\r\n    const [content, setContent] = useState<string>('');\r\n    const toggleNewCommentModal = () => setIsNewCommentModalVisible(!newCommentModalVisible);\r\n    const toggleReplyEditorVisible = () => setReplyEditorVisible(!replyEditorVisible);\r\n\r\n    const generateReplyExtra = () => \r\n    (\r\n        <div>\r\n        <EditOutlined onClick ={e => {\r\n            e.stopPropagation();\r\n            toggleReplyEditorVisible();\r\n        }}\r\n        ></EditOutlined>\r\n        <PlusCircleOutlined onClick={() => toggleNewCommentModal()}/>\r\n        </div>\r\n    )\r\n\r\n    useEffect(() => {\r\n        setCommentData(props?.comments.filter((comment: Comment) => comment.relatedPostId === props.id).map((comment: Comment) => ({\r\n            author: props.users.find((user: User) => user.id === comment.userId).username,\r\n            comment: comment.content\r\n        })));\r\n    }, [newCommentModalVisible]);\r\n\r\n    const createComment = () => {\r\n        props.dispatch({type: 'ADD_COMMENT', data: {\r\n            relatedPostId: props.id,\r\n            content: content,\r\n            userId: props.loggedUser.id\r\n        }});\r\n        setCommentData(props?.comments.filter((comment: Comment) => comment.relatedPostId === props.id).map((comment: Comment) => ({\r\n            author: props.users.find((user: User) => user.id === comment.userId).username,\r\n            comment: comment.content\r\n        })));\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <Modal\r\n                title=\"Create New Comment\"\r\n                visible={newCommentModalVisible}\r\n                onCancel={() => toggleNewCommentModal()}\r\n                onOk={() => toggleNewCommentModal()}\r\n                closable\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => toggleNewCommentModal()}>\r\n                        Cancel\r\n                    </Button>,\r\n                    <Button\r\n                        key=\"submit\"\r\n                        type=\"primary\"\r\n                        onClick={() => {createComment(); toggleNewCommentModal()}}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                ]}\r\n                >\r\n            \t<div>\r\n\t\t\t\t\t<Row gutter = {[0, 8]}>\r\n\t\t\t\t\t\t<TextArea placeholder = \"Type something...\" value={content} onChange={(e: any) => setContent(e.target.value)}></TextArea>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n            </Modal>\r\n            <Card title = {props.title} style= {{width: 750, textAlign:\"center\"}}>\r\n                <p style = {{textAlign:\"left\"}}>{props.content}</p>\r\n                {(() => {\r\n                    if (props.image !== null && props.image !== undefined) {\r\n                        return (<div><Image width = {80} src = {props.image}></Image></div>);\r\n                    }\r\n\r\n                    else {\r\n                        return(<div></div>);\r\n                    }\r\n                })()}\r\n                <Card type = \"inner\">\r\n                    <Collapse defaultActiveKey = {[1]} ghost>\r\n                        <Panel header = \"Comments\" key = \"comments-section\" style = {{textAlign:\"left\"}} \r\n                        extra = {generateReplyExtra()}>\r\n                            {!newCommentModalVisible && <CommentView data={commentData} replyEditorVisible = {replyEditorVisible} ></CommentView>}\r\n                        </Panel>             \r\n                    </Collapse>\r\n                </Card>\r\n            </Card>\r\n            \r\n        </div>\r\n    )   \r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    comments: state.comments,\r\n    users: state.users,\r\n    loggedUser: state.loggedUser\r\n});\r\n  \r\n\r\nexport default connect(mapStateToProps)(PostView);","C:\\Users\\mamik\\Desktop\\fati\\src\\components\\View\\CommentView.tsx",[],["58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":42,"nodeType":"66","messageId":"67","endLine":1,"endColumn":46},{"ruleId":"64","severity":1,"message":"68","line":1,"column":48,"nodeType":"66","messageId":"67","endLine":1,"endColumn":56},{"ruleId":"64","severity":1,"message":"69","line":1,"column":68,"nodeType":"66","messageId":"67","endLine":1,"endColumn":72},{"ruleId":"64","severity":1,"message":"70","line":12,"column":9,"nodeType":"66","messageId":"67","endLine":12,"endColumn":14},{"ruleId":"64","severity":1,"message":"71","line":23,"column":9,"nodeType":"66","messageId":"67","endLine":23,"endColumn":21},{"ruleId":"72","severity":1,"message":"73","line":50,"column":5,"nodeType":"74","endLine":50,"endColumn":28,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":72,"column":5,"nodeType":"74","endLine":72,"endColumn":15,"suggestions":"77"},{"ruleId":"72","severity":1,"message":"78","line":79,"column":5,"nodeType":"74","endLine":79,"endColumn":28,"suggestions":"79"},{"ruleId":"64","severity":1,"message":"80","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":14},{"ruleId":"64","severity":1,"message":"81","line":11,"column":36,"nodeType":"66","messageId":"67","endLine":11,"endColumn":63},{"ruleId":"72","severity":1,"message":"82","line":23,"column":6,"nodeType":"74","endLine":23,"endColumn":32,"suggestions":"83"},{"ruleId":"64","severity":1,"message":"84","line":5,"column":19,"nodeType":"66","messageId":"67","endLine":5,"endColumn":27},{"ruleId":"72","severity":1,"message":"85","line":38,"column":8,"nodeType":"74","endLine":38,"endColumn":32,"suggestions":"86"},{"ruleId":"60","replacedBy":"87"},{"ruleId":"62","replacedBy":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"@typescript-eslint/no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'Skeleton' is defined but never used.","'Card' is defined but never used.","'Panel' is assigned a value but never used.","'postViewList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'prepareCommunityData' and 'props.posts'. Either include them or remove the dependency array. If 'setPostList' needs the current value of 'props.posts', you can also switch to useReducer instead of useState and read 'props.posts' in the reducer.","ArrayExpression",["91"],"React Hook useEffect has a missing dependency: 'createPosts'. Either include it or remove the dependency array.",["92"],"React Hook useEffect has a missing dependency: 'prepareCommunityData'. Either include it or remove the dependency array.",["93"],"'Search' is defined but never used.","'setIsNewCommentModalVisible' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.posts'. Either include it or remove the dependency array. If 'setPostList' needs the current value of 'props.posts', you can also switch to useReducer instead of useState and read 'props.posts' in the reducer.",["94"],"'useStore' is defined but never used.","React Hook useEffect has missing dependencies: 'props?.comments', 'props.id', and 'props.users'. Either include them or remove the dependency array. If 'setCommentData' needs the current value of 'props.comments', you can also switch to useReducer instead of useState and read 'props.comments' in the reducer.",["95"],["89"],["90"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [isNewPostModalVisible, prepareCommunityData, props.posts]",{"range":"106","text":"107"},"Update the dependencies array to be: [createPosts, postList]",{"range":"108","text":"109"},"Update the dependencies array to be: [isNewCommunityVisible, prepareCommunityData]",{"range":"110","text":"111"},"Update the dependencies array to be: [isNewCommentModalVisible, props.posts]",{"range":"112","text":"113"},"Update the dependencies array to be: [newCommentModalVisible, props?.comments, props.id, props.users]",{"range":"114","text":"115"},[1951,1974],"[isNewPostModalVisible, prepareCommunityData, props.posts]",[2643,2653],"[createPosts, postList]",[2772,2795],"[isNewCommunityVisible, prepareCommunityData]",[651,677],"[isNewCommentModalVisible, props.posts]",[1580,1604],"[newCommentModalVisible, props?.comments, props.id, props.users]"]